name: Run Flight Monitoring Script

on:
  workflow_dispatch:  # Allows manual triggering of the workflow

env:
  ARRIVAL_LAT: ${{ secrets.ARRIVAL_LAT }}
  ARRIVAL_LONG: ${{ secrets.ARRIVAL_LONG }}
  ARRIVAL_HEADING: ${{ secrets.ARRIVAL_HEADING }}
  DEPARTURE_LAT: ${{ secrets.DEPARTURE_LAT }}
  DEPARTURE_LONG: ${{ secrets.DEPARTURE_LONG }}
  DEPARTURE_HEADING: ${{ secrets.DEPARTURE_HEADING }}
  NOTI_URL: ${{ secrets.NOTI_URL }}

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # Use Python 3.10

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python script
      run: |
        python main.py

    - name: Commit and push state file
      if: always()
      run: |
        if git diff --quiet runway_state.json; then
          echo "No changes in runway_state.json. Skipping commit."
        else
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add runway_state.json

          # Commit with a new message
          git commit -m "Updated runway_state.json with new data"

          # Fetch the latest changes from the remote
          git fetch origin

          # Merge remote changes into your branch
          git merge origin/main --no-edit || true  # Ignore conflicts for simplicity

          # Push the new commit
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

